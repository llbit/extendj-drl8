/* Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect Constant {
  class Constant {
    static class ConstantInt extends Constant {
      private int value;

      public ConstantInt(int i) {
        this.value = i;
      }

      @Override
      int intValue() {
        return value;
      }

      @Override
      long longValue() {
        return value;
      }

      @Override
      float floatValue() {
        return value;
      }

      @Override
      double doubleValue() {
        return value;
      }

      @Override
      String stringValue() {
        return new Integer(value).toString();
      }

      @Override
      Literal buildLiteral() {
        return new IntegerLiteral(stringValue());
      }
    }
    static class ConstantLong extends Constant {
      private long value;

      public ConstantLong(long l) {
        this.value = l;
      }

      @Override
      int intValue() {
        return (int)value;
      }

      @Override
      long longValue() {
        return value;
      }

      @Override
      float floatValue() {
        return value;
      }

      @Override
      double doubleValue() {
        return value;
      }

      @Override
      String stringValue() {
        return new Long(value).toString();
      }

      @Override
      Literal buildLiteral() {
        return new LongLiteral(stringValue());
      }
    }
    static class ConstantFloat extends Constant {
      private float value;

      public ConstantFloat(float f) {
        this.value = f;
      }

      @Override
      int intValue() {
        return (int)value;
      }

      @Override
      long longValue() {
        return (long)value;
      }

      @Override
      float floatValue() {
        return value;
      }

      @Override
      double doubleValue() {
        return value;
      }

      @Override
      String stringValue() {
        return new Float(value).toString();
      }

      @Override
      Literal buildLiteral() {
        return new FloatingPointLiteral(stringValue());
      }
    }
    static class ConstantDouble extends Constant {
      private double value;

      public ConstantDouble(double d) {
        this.value = d;
      }

      @Override
      int intValue() {
        return (int)value;
      }

      @Override
      long longValue() {
        return (long)value;
      }

      @Override
      float floatValue() {
        return (float)value;
      }

      @Override
      double doubleValue() {
        return value;
      }

      @Override
      String stringValue() {
        return new Double(value).toString();
      }

      @Override
      Literal buildLiteral() {
        return new DoubleLiteral(stringValue());
      }
    }
    static class ConstantChar extends Constant {
      private char value;

      public ConstantChar(char c) {
        this.value = c;
      }

      @Override
      int intValue() {
        return value;
      }

      @Override
      long longValue() {
        return value;
      }

      @Override
      float floatValue() {
        return value;
      }

      @Override
      double doubleValue() {
        return value;
      }

      @Override
      String stringValue() {
        return new Character(value).toString();
      }

      @Override
      Literal buildLiteral() {
        return new CharacterLiteral(stringValue());
      }
    }
    static class ConstantBoolean extends Constant {
      private boolean value;

      public ConstantBoolean(boolean b) {
        this.value = b;
      }

      @Override
      boolean booleanValue() {
        return value;
      }

      @Override
      String stringValue() {
        return new Boolean(value).toString();
      }

      @Override
      Literal buildLiteral() {
        return new BooleanLiteral(stringValue());
      }
    }
    static class ConstantString extends Constant {
      private String value;
      public ConstantString(String s) {
        this.value = s;
      }

      @Override
      String stringValue() {
        return value;
      }

      @Override
      Literal buildLiteral() {
        return new StringLiteral(stringValue());
      }
    }


    int intValue() {
      throw new UnsupportedOperationException();
    }

    long longValue() {
      throw new UnsupportedOperationException();
    }

    float floatValue() {
      throw new UnsupportedOperationException();
    }

    double doubleValue() {
      throw new UnsupportedOperationException();
    }

    boolean booleanValue() {
      throw new UnsupportedOperationException(getClass().getName());
    }

    String stringValue() {
      throw new UnsupportedOperationException();
    }

    Literal buildLiteral() {
      throw new UnsupportedOperationException();
    }

    protected Constant() {
    }

    public boolean error = false;

    static Constant create(int i) {
      return new ConstantInt(i);
    }

    static Constant create(long l) {
      return new ConstantLong(l);
    }

    static Constant create(float f) {
      return new ConstantFloat(f);
    }

    static Constant create(double d) {
      return new ConstantDouble(d);
    }

    static Constant create(boolean b) {
      return new ConstantBoolean(b);
    }

    static Constant create(char c) {
      return new ConstantChar(c);
    }

    static Constant create(String s) {
      return new ConstantString(s);
    }
  }
}
