aspect Rule {
  syn boolean RuleDecl.isStatic() = false;

  eq RuleDecl.getChild().reachable() = true;

  eq PatternDecl.getTypeAccess().nameType() = NameType.TYPE_NAME;

  syn Access WhenDecl.getParamType(String name) {
    for (PatternDecl pattern : getPatternDeclList()) {
      if (name.equals(pattern.getBind())) {
        return pattern.getTypeAccess();
      }
    }
    return null;
  }

  eq ThenDecl.getBlock().lookupVariable(String name) {
    for (ParameterDeclaration param : getParameterDeclarations()) {
      if (name.equals(param.getID())) {
        return param;
      }
    }
    RuleDecl rule = (RuleDecl) getParent().getParent();
    if (rule.hasWhenDecl()) {
      Access paramType = rule.getWhenDecl().getParamType(name);
      if (paramType != null) {
          ParameterDeclaration param = new ParameterDeclaration(paramType, name);
          param.setParent(this);
          getParameterDeclarations().add(param);
          return param;
      }
    }
    return emptySet();
  }

  syn java.util.List<RuleDecl> CompilationUnit.getRules() {
    java.util.List<RuleDecl> rules = new java.util.ArrayList<RuleDecl>();
    for (TypeDecl type : getTypeDecls()) {
      if (type instanceof ClassDecl) {
        for (BodyDecl body : ((ClassDecl)type).getBodyDecls()) {
          if (body instanceof RuleDecl) {
            rules.add((RuleDecl)body);
          }
        }
      }
    }
    return rules;
  }

  /**
   * Variable lookups inside a constraint delegate to the
   * element type of the field which the path chunk refers to.
   */
  eq Constraint.getExpr().lookupVariable(String name) {
    TypeDecl elementType = pathChunk().type().iterableElementType();
    if (elementType.isUnknown()) {
      // TODO: generate an error message instead.
      throw new Error("Unknown element type for constraint.");
    }
    return elementType.memberFields(name);
  }

  inh SimpleSet<Variable> OOPathChunk.lookupVariable(String name);

  syn TypeDecl OOPathChunk.type() {
    SimpleSet<Variable> decl = lookupVariable(getVar());
    if (decl.isSingleton()) {
      return decl.singletonValue().type();
    } else {
      // TODO: generate an error message instead.
      throw new Error("Found no matching field for name " + getVar());
    }
  }

  inh OOPathChunk Constraint.pathChunk();

  eq OOPathChunk.getChild().pathChunk() = this;

  eq Program.getChild().pathChunk() {
    throw new Error("Found no parent path chunk.");
  }

  /**
   * All instance variables used in a rule are assigned before use.
   */
  eq RuleDecl.getChild().assignedBefore(Variable v) =
      v.isField() ? true : assignedBefore(v);
}

