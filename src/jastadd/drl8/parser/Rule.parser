MemberDecl class_member_declaration = rule_declaration;

RuleDecl rule_declaration =
  modifiers.m? RULE IDENTIFIER.id LBRACE when? then? RBRACE {: return new RuleDecl(new Modifiers(m), id, when, then); :}
  ;

WhenDecl when =
    WHEN LBRACE RBRACE {: return new WhenDecl(new List()); :}
  | WHEN LBRACE patterns RBRACE {: return new WhenDecl(patterns); :}
  ;

List patterns =
    pattern {: return new List().add(pattern); :}
  | patterns pattern {: return patterns.add(pattern); :}
  ;

PatternDecl pattern =
    type.t IDENTIFIER.id UNIF patternExpr SEMICOLON {: return new PatternDecl(t, id, patternExpr); :}
  ;

PatternExpr patternExpr =
    ooPathExpr {: return new PatternExpr(ooPathExpr); :}
  ;

OOPathExpr ooPathExpr =
    ooPathChunks {: return new OOPathExpr(ooPathChunks); :}
  ;

List ooPathChunks =
    ooPathChunk {: return new List().add(ooPathChunk); :}
  | ooPathChunks ooPathChunk {: return ooPathChunks.add(ooPathChunk); :}
  ;

OOPathChunk ooPathChunk =
    DIV IDENTIFIER.id ooPathConstraints? {: return new OOPathChunk(id, ooPathConstraints); :}
  ;

List ooPathConstraints =
    LBRACE constraints RBRACE {: return constraints; :}
  ;

List constraints =
    constraint {: return new List().add(constraint); :}
  | constraints COMMA constraint {: return constraints.add(constraint); :}
  ;
  
Constraint constraint =
    expression {: return new Constraint(expression); :}
  ;

ThenDecl then =
    THEN block {: return new ThenDecl(new List(), block); :}
  ;

